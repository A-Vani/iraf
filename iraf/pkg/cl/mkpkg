# Make the CL.

$call	relink				# make cl.e in current directory
$exit

update:					# make cl.e and install in bin$
	$call	relink
	$call	install
	;

relink:
	# [MACHDEP] The following is machine dependent, but is exercised only
	# on our software development system when changes are made to the
	# grammar of the CL.  On other systems the files lexyy.c, ytab.c, and
	# ytab.h may be used without modification.

	#$ifeq (hostid, unix)
	#    $ifolder (lexyy.c, grammar.l)
	#	$echo "rebuilding lexyy.c"
	#	!lex -t grammar.l | sed -f lex.sed > lexyy.c
	#    $endif
	#    $ifolder (ytab.c,  grammar.y)
	#	$echo "rebuilding ytab.c"
	#	!yacc -vd grammar.y; mv y.tab.c ytab.c; mv y.tab.h ytab.h
	#    $endif
	#$endif

	#$ifeq (siteid, stsci)
	#$ifeq (hostid, vms)
	#    $ifolder (lexyy.c, grammar.l)
	#	$echo "rebuilding lexyy.c"
	#	!lex grammar.l
	#	!@lex.com
	#    $endif
	#    $ifolder (ytab.c,  grammar.y)
	#	$echo "rebuilding ytab.c"
	#	!yacc -vd grammar.y
	#    $endif
	#$endif
	#$endif

	$update libpkg.a

	#$set	xflags = "$(xflags) -x"
	$omake  cl.x
	$omake	globals.c\
		construct.h eparam.h operand.h param.h task.h
	$omake	opcodes.c config.h\
		construct.h errs.h grammar.h mem.h opcodes.h operand.h\
		param.h task.h
link:
	$ifeq (noreadline, true)
	    $set	LIBS = "-lc -lcur -lds -lstg"
	$else
	    $set	LIBS = "-lc -lcur -lds -lstg -lreadline -lncurses"
	$endif
	$link	cl.o globals.o opcodes.o libpkg.a $(LIBS)
	;

install:
	$move	cl.e bin$
	;

libpkg.a:
	#$set	xflags = "$(xflags) -qx"

	binop.c		config.h operand.h errs.h

	bkg.c		clmodes.h config.h operand.h clmodes.h mem.h errs.h\
			param.h task.h

	builtin.c	clmodes.h config.h mem.h operand.h param.h task.h\
			errs.h

	clprintf.c	config.h operand.h param.h task.h errs.h

	clreadline.c	clreadline.h

	clsystem.c	errs.h

	compile.c	config.h operand.h opcodes.h mem.h errs.h

	debug.c		operand.h mem.h grammar.h opcodes.h config.h param.h\
			task.h

	decl.c		clmodes.h operand.h mem.h grammar.h opcodes.h config.h\
			param.h task.h errs.h construct.h ytab.h

	edcap.c		config.h operand.h param.h task.h eparam.h

	eparam.c	config.h mem.h operand.h\
			errs.h param.h grammar.h task.h eparam.h

	errs.c		clmodes.h config.h operand.h param.h task.h mem.h\
			errs.h grammar.h construct.h

	exec.c		clmodes.h config.h mem.h opcodes.h operand.h param.h\
			task.h errs.h grammar.h

	gquery.c	config.h operand.h param.h grammar.h task.h clmodes.h

	gram.c		clmodes.h operand.h mem.h grammar.h opcodes.h config.h\
			param.h task.h errs.h construct.h ytab.h

	history.c	config.h errs.h mem.h operand.h param.h task.h\
			clmodes.h grammar.h

	lists.c		config.h mem.h operand.h param.h task.h errs.h

	main.c		grammar.h opcodes.h operand.h param.h config.h\
			clmodes.h task.h errs.h mem.h

	modes.c		clmodes.h config.h construct.h operand.h param.h\
			grammar.h mem.h task.h errs.h

	operand.c	errs.h config.h operand.h param.h grammar.h mem.h\
			task.h construct.h eparam.h

	param.c		config.h operand.h param.h grammar.h mem.h\
			task.h errs.h clmodes.h construct.h

	pfiles.c	config.h errs.h operand.h mem.h param.h task.h\
			grammar.h

	prcache.c	config.h errs.h task.h

	scan.c		config.h operand.h param.h grammar.h task.h errs.h

	stack.c		mem.h operand.h config.h param.h task.h errs.h

	task.c		config.h operand.h param.h mem.h task.h errs.h\
			clmodes.h

	unop.c		config.h operand.h errs.h task.h param.h

	ytab.c		config.h mem.h operand.h param.h grammar.h opcodes.h\
			clmodes.h task.h construct.h errs.h lexyy.c lexicon.c
	;
