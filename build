#!/bin/csh
#
# See BUILD_NOTES for details
#
# This is a csh script because it uses stuff that comes with IRAF

# try to force debugging
#   to build IRAF statically, add -static -static-libgcc to XC_LFLAGS
setenv XC_LFLAGS "-g"

source build.setup

env | sort
pwd

# Record determination of IRAFARCH for later use by ur-sel-real,
# ur_normalize etc. Also note that IRAF 2.15 now has a helper script
# hlib/irafarch.csh that we could use to figure out IRAFARCH above.
if (! -e ur) then
    mkdir ur
endif
echo $IRAFARCH > ur/irafarch

yes '' | unix/hlib/install

rm -rf include ; mkdir include

# cp $iraf/unix/hlib/libc/iraf.h  		include/
# ln -s $iraf/unix/bin/f2c.h			include/
ln -s ../unix/hlib/libc/iraf.h			include/  # ur_normalized copy
ln -s ../unix/bin/f2c.h				include/  # relocatable link
cp $iraf/unix/hlib/libc/vosproto.h 		include/
cp $iraf/unix/boot/xyacc/yaccpar.x 		include/

touch $iraf/extern/.zzsetenv.def

( cd unix/f2c/src ; make -f makefile.u ; cp f2c $iraf/unix/bin.$IRAFARCH/f2c.e ) >& log.010.f2c
if ( $status != 0 ) then
	echo f2c compile failed - see log.010.f2c
	exit 1
endif

if ( "$sm_logs" != "" ) cp log.010.f2c $sm_logs

( cd unix/f2c/libf2c ; make -f makefile.u CFLAGS="$CFLAGS" ; cp f2c.h libf2c.a $iraf/unix/bin.$IRAFARCH/ ) >& log.020.libf2c
if ( $status != 0 ) then
	echo libf2c compile failed - see log.020.libf2c
	exit 1
endif

if ( "$sm_logs" != "" ) cp log.020.libf2c $sm_logs

make $IRAFARCH 

source $iraf/unix/hlib/irafuser.csh

# this is all that "make sysgen" does
util/mksysgen >& log.030.mksysgen

if ( "$sm_logs" != "" ) cp log.030.mksysgen $sm_logs

tr -d '[\015]' < log.030.mksysgen | egrep -v -f mkpkg_patterns
set st=$status

# remove IRAF's libcfitsio.a to avoid conflict (duplicate symbols)
$UR_DIR/iraf/bin.$IRAFARCH/libcfitsio.a
st={$st}$?

exit $st
